{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"SurgingCloud <p>Encrypts your data before uploading them to cloud drives. This tool features privacy, data security and data recoverability.</p>"},{"location":"develop/","title":"Developer Guide","text":"<p>Let's make SurgingCloud better \ud83e\udd17.</p>"},{"location":"develop/env/","title":"Environment Setup","text":"<p>This page covers how to set up the development environment for both the SurgingCloud .NET project and the documentation.</p>"},{"location":"develop/env/#surgingcloud-net-project","title":"SurgingCloud .NET project","text":"<p>The whole project is developed in .NET 6.</p> <p>I am using JetBrains Rider with default settings to develop. Just import this project and you are ready to code.</p>"},{"location":"develop/env/#documentation","title":"Documentation","text":"<p>This project use Material for MkDocs to build the documentation. Do the following steps to set it up:</p> <p>Create a virtual environment:</p> <pre><code>python -m venv venv\n.\\venv\\Scripts\\activate\n</code></pre> <p>Install the necessary packages:</p> <pre><code>pip install -r .\\requirements.txt\n</code></pre> <p>Start a live server for mkdocs: <pre><code>mkdocs serve\n</code></pre></p>"},{"location":"installation/","title":"Installation","text":"<p>SurgingCloud is a command line tool currently available on Windows 10/11. So, the installation options are limited.</p> <p>Windows Installation (Recommended)</p> <p>Source Installation</p>"},{"location":"installation/source/","title":"Source Installation","text":"<p>Clone the repository:</p> <pre><code>git clone https://github.com/gustaavv/SurgingCloud.git\ncd SurgingCloud\n</code></pre> <p>Publish the project:</p> <pre><code>dotnet publish ./SurgingCloud.Cli/SurgingCloud.Cli.csproj -c Release -o ./publish/\n</code></pre> <p>After publishing, you are ready to use <code>.\\publish\\SurgingCloud.Cli.exe</code></p>"},{"location":"installation/windows/","title":"Windows Installation","text":"<p>Go to the release page and download the latest version. No installer is provided, only the portable version. After unzipping the file, you are ready to go.</p>"},{"location":"misc/3rd-party/","title":"3rd-party libraries","text":"<p>This page lists the 3rd-party libraries this project uses.</p>"},{"location":"misc/3rd-party/#surgingcloudcore","title":"SurgingCloud.Core","text":"<ul> <li>Dapper</li> <li>Dapper.Transaction</li> <li>System.Data.SQLite</li> <li>Microsoft.Extensions.DependencyInjection</li> </ul>"},{"location":"misc/3rd-party/#surgingcloudcli","title":"SurgingCloud.Cli","text":"<ul> <li>CommandLineParser</li> <li>ConsoleTables</li> </ul>"},{"location":"misc/3rd-party/#surgingcloudcoretests","title":"SurgingCloud.Core.Tests","text":"<ul> <li>JetBrains.Annotations</li> <li>Microsoft.NET.Test.Sdk</li> <li>xunit</li> <li>xunit.runner.visualstudio</li> </ul>"},{"location":"misc/3rd-party/#documentation","title":"Documentation","text":"<ul> <li>mkdocs</li> <li>mkdocs-material</li> <li>Font Awesome</li> <li>Twemoji</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>This section starts with a quick tutorial, followed by detailed information on different operations this command line tool can perform.</p> <p>SurgingCloud serves as a foundational tool for encryption, which may not be complete or overall by itself. There are scripts you can use to get enhanced features.</p>"},{"location":"usage/common/","title":"Common Operation","text":"<p>This section talks about some common things that the operations above share, e.g., common arguments and common output.</p>"},{"location":"usage/common/#database-path-verbose","title":"Database path verbose","text":"<p>Every command will begin with one of the following outputs. They serve as hints on which database we are currently using.</p> <pre><code>Create a new database file at /path/to/db\n</code></pre> <pre><code>Using existing database file at /path/to/db\n</code></pre> <p>This verbose is disabled if <code>--out-json</code> is set.</p>"},{"location":"usage/common/#output-in-json-format","title":"Output in json format","text":"<p>Every command can have an argument <code>--out-json</code>. When it is enabled, the output will be in json format so that the scripts using SurgingCloud can parse the output easier.</p> <p>Here is the output of encrypting a file:</p> <p><code>--out-json</code> disabled (default):</p> <pre><code>Using existing database file at data.db\nEncryption succeeds:\nItem id = 1\nsrc: D:\\Pictures\\selfie.png\nout: E:\\backup\\Pictures\\6367a30064043fb1f227.rar\n</code></pre> <p><code>--out-json</code> enabled:</p> <pre><code>{\n  \"Success\": true,\n  \"Message\": \"Encryption succeeds:\\nItem id = 1\\nsrc: D:\\\\Pictures\\\\selfie.png\\nout: E:\\\\backup\\\\Pictures\\\\6367a30064043fb1f227.rar\",\n  \"Data\": 1\n}\n</code></pre> <ul> <li><code>Success</code>: a boolean value, indicating whether the operation succeeds.</li> <li><code>Message</code>: a string value, whose value is normally the same as the value when <code>--out-json</code> is disabled except for the database path verbose.</li> <li><code>Data</code>: value of any type, whose value may be useful to the scripts and is dependent on the operation. This field is <code>null</code> if no such data is provided. </li> </ul>"},{"location":"usage/common/#backup-database","title":"Backup database","text":"<p>The argument <code>--bkp-db</code> allows you to back up the database file before doing any operation. It will duplicate the database file (suppose it is <code>data.db</code>) in the same folder, and rename it to <code>data.db.20250704060547283.bkp</code>. <code>20250704060547283</code> is the timestamp now, whose precision is millisecond.</p> <p>This argument will add the following output if <code>--out-json</code> is disabled:</p> <pre><code>Backup database file at E:\\bkp\\data.db.20250704060547283.bkp\n</code></pre>"},{"location":"usage/config/","title":"Config Operation","text":"<p>The configuration of SurgingCloud is also stored in the database file. That's why you should always set <code>--db \"path/to/db\"</code>.</p>"},{"location":"usage/config/#get-current-config","title":"Get current config","text":"<pre><code>.\\SurgingCloud.Cli.exe config --get --db \"path/to/db\"\n</code></pre> <p>Output</p> <pre><code>{\n  \"Id\": 1,\n  \"RarPath\": \"D:\\\\WinRAR\\\\Rar.exe\",\n  \"CheckUpdateFrequencyInHours\": 24,\n  \"LastCheckUpdateAt\": \"2025-08-09T07:54:34\",\n  \"Others\": null\n}\n</code></pre> <p>The output is in json format.</p> <p>Currently, only <code>RarPath</code> field is in use. You can ignore other fields.</p>"},{"location":"usage/config/#update-config","title":"Update config","text":"<pre><code>.\\SurgingCloud.Cli.exe config --update --rar \"D:\\WinRAR\\Rar.exe\" --db \"path/to/db\"\n</code></pre> <p>Arguments</p> <ul> <li><code>--rar \"D:\\WinRAR\\Rar.exe\"</code>: set the path to <code>Rar.exe</code> installed on your computer.</li> </ul> <p>Output</p> <pre><code>Update succeeds\n</code></pre>"},{"location":"usage/config/#validate-config","title":"Validate config","text":"<pre><code>.\\SurgingCloud.Cli.exe config --validate --db \"path/to/db\"\n</code></pre> <p>Output</p> <pre><code>Config validation succeeds\n</code></pre>"},{"location":"usage/decrypt/","title":"Decrypt Operation","text":""},{"location":"usage/decrypt/#decrypt-by-file-path","title":"Decrypt by file path","text":"<pre><code>.\\SurgingCloud.Cli.exe dec --bypath --sid 0 --encpath \"encrypted/file/path\" --db \"path/to/db\"\n</code></pre>"},{"location":"usage/encrypt/","title":"Encrypt Operation","text":"<p>The encryption functionality of SurgingCloud is currently based on <code>rar.exe</code> (You can find it in the installation folder of WinRAR). You should install it first.</p> Disclaimer <p>This project is not affiliated with, endorsed by, or financially supported by WinRAR. The use of WinRAR within this project is solely for its intended functionality, and it is not intended to serve as an advertisement or promotion of the software.</p>"},{"location":"usage/encrypt/#encrypt-a-filefolder","title":"Encrypt a file/folder","text":"<pre><code>.\\SurgingCloud.Cli.exe enc --sid 1 --src \"D:\\Pictures\\selfie.png\" --out \"E:\\backup\\Pictures\" --db \"path/to/db\"\n</code></pre> <p>Arguments</p> <ul> <li><code>--sid 1</code>: specify which subject to store the encryption information of this file.</li> <li><code>--src \"D:\\Pictures\\selfie.png\"</code>: the path to the file/folder you want to encrypt.</li> <li><code>--out \"E:\\backup\\Pictures\"</code>: the folder to generate the encrypted file.</li> <li>(Optional) <code>--enc-folder</code>: encrypt the whole folder into a file instead of an empty folder. The default value is <code>false</code>.</li> <li>(Optional) <code>--ignore-dup</code>: ignore encryption if there is an item with the same filename and the same hashBefore in the database. The default value is <code>false</code>.</li> </ul> <p>Output</p> <pre><code>Encryption succeeds:\nItem id = 1\nsrc: D:\\Pictures\\selfie.png\nout: E:\\backup\\Pictures\\6367a30064043fb1f227.rar\n</code></pre>"},{"location":"usage/hello/","title":"Hello SurgingCloud","text":"<p>This tutorial will walk you through the basic steps to use SurgingCloud.</p>"},{"location":"usage/hello/#step-1-initialization","title":"Step 1. Initialization","text":"<p>After installation, the first thing to do is to initialize. Execute the following command:</p> <pre><code>.\\SurgingCloud.Cli.exe config --db \"data.db\" --update --rar \"D:\\WinRAR\\Rar.exe\"\n</code></pre> <p>The output will be like:</p> <pre><code>Create a new database file at data.db\nUpdate succeeds\n</code></pre> <p>The command does two things:</p> <ul> <li>Create a database file at <code>data.db</code>. You should put the database in a safe location because it stores all the encryption information. You should also do regular backups.</li> <li>Config SurgingCloud to let it know the path to <code>rar.exe</code> installed on your computer.</li> </ul>"},{"location":"usage/hello/#step-2-create-a-subject","title":"Step 2. Create a subject","text":"<p>A subject is like a folder, containing all the encryption information of files stored in it. Let's create one subject called <code>Photos</code> with password <code>123</code>:</p> <pre><code>.\\SurgingCloud.Cli.exe subject --db \"data.db\" --new --name \"Photos\" --pwd \"123\"\n</code></pre> <p>The output will be like: <pre><code>Using existing database file at data.db\nCreation succeeds, new subject id = 1\n</code></pre></p> <p>Each subject is uniquely identified by its id. Take note of this id. We will need it in the following steps.</p>"},{"location":"usage/hello/#step-3-encrypt-a-file","title":"Step 3. Encrypt a file","text":"<p>SurgingCloud encrypts a file by storing its relevant information into a user-specified subject and generating the encrypted file.</p> <p>Let's encrypt a file <code>D:\\Pictures\\selfie.png</code> using the subject with id <code>1</code>, i.e. the one we just created, and make the encrypted file generated in folder <code>E:\\backup\\Pictures</code>: </p> <pre><code>.\\SurgingCloud.Cli.exe enc --db \"data.db\" --sid 1 --src \"D:\\Pictures\\selfie.png\" --out \"E:\\backup\\Pictures\"\n</code></pre> <p>The output will be like: <pre><code>Using existing database file at data.db\nEncryption succeeds:\nItem id = 1\nsrc: D:\\Pictures\\selfie.png\nout: E:\\backup\\Pictures\\6367a30064043fb1f227.rar\n</code></pre></p> <p>Each item is uniquely identified by its id.</p> <p>The encrypted file is at <code>E:\\backup\\Pictures\\6367a30064043fb1f227.rar</code>. </p>"},{"location":"usage/hello/#step-4-upload-the-encrypted-file","title":"Step 4. Upload the encrypted file","text":"<p>Well done! You have successfully encrypted a file. Now feel free to upload the encrypted file to (various) cloud drives.</p>"},{"location":"usage/item/","title":"Item Operation","text":""},{"location":"usage/item/#get-item-detail","title":"Get Item detail","text":"<pre><code>.\\SurgingCloud.Cli.exe item --get --iid 1 --db \"path/to/db\"\n</code></pre> <p>Arguments</p> <ul> <li><code>--iid 1</code>: item id.</li> </ul> <p>Output</p> <pre><code>{\n  \"Id\": 1,\n  \"SubjectId\": 1,\n  \"NameBefore\": \"selfie.png\",\n  \"NameAfter\": \"6367a30064043fb1f227\",\n  \"ItemType\": \"File\",\n  \"HashBefore\": \"5ccbd62474fc77ca19d4c834e52da036fc54fc11b4bb902d2a92162432baf0ba\",\n  \"HashAfter\": \"8437d8c1720a03ea15253cfb58b663006efba51f7b15bffa4ba3c6b54af9fc29\",\n  \"SizeBefore\": 77472,\n  \"SizeAfter\": 89944,\n  \"CreateAt\": \"2025-08-09T08:13:38\",\n  \"Others\": null\n}\n</code></pre> <p>The output is in json format.</p>"},{"location":"usage/scripts/","title":"Scripts","text":"<p>This section contains Python scripts based on SurgingCloud to provide advanced features.</p> <p><code>surging_cloud_exe</code> is a global variable of the path to <code>SurgingCloud.Cli.exe</code>.</p> <pre><code>from os.path import isfile\n\nsurging_cloud_exe = r'path\\to\\exe'\n\nif not isfile(surging_cloud_exe):\n    print('SurgingCloud.Cli.exe not found.')\n    exit(1)\n</code></pre>"},{"location":"usage/scripts/#incrementally-encrypt-a-folder","title":"Incrementally encrypt a folder","text":"<p>If we constantly add files into a certain folder (<code>folder_path</code>), we may want to only generate the encrypted files of the newly-added ones.</p> cliScripts/incr_enc_folder.py<pre><code>import os\nimport subprocess\nfrom os.path import isdir, join\n\n\ndef incr_enc_folder(folder_path: str, db_path: str, output_path: str, sid: int):\n    if not isdir(folder_path):\n        print(f'No such folder: {folder_path}')\n        return\n\n    for f in os.listdir(folder_path):\n        f = join(folder_path, f)\n        print('Encrypting', f)\n        result = subprocess.run([\n            surging_cloud_exe, 'enc',\n            '--db', db_path,\n            '--sid', str(sid),\n            '--ignore-dup',\n            '--src', f,\n            '--out', output_path,\n        ], capture_output=True, text=True, shell=True)\n        if result.returncode == 0:\n            print(result.stdout)\n        else:\n            print(result.stderr)\n        print('-------------------------------------------------')\n</code></pre>"},{"location":"usage/scripts/#recursively-encrypt-a-folder","title":"Recursively encrypt a folder","text":"<p>It is recommended to create a subject for each folder like this script does. The names of the subjects created represent the relative paths of those corresponding subfolders to the top-level folder.</p> cliScripts/recursive_enc_folder.py<pre><code>import os\nfrom os.path import isdir, isfile, join\nimport subprocess\nimport json\n\n\ndef get_subject(sid: int, db_path: str):\n    result = subprocess.run([\n        surging_cloud_exe, 'subject', '--db', db_path, '--out-json',\n        '--get', '--sid', str(sid),\n    ], capture_output=True, text=True, shell=True)\n    subject = json.loads(result.stdout)\n    return subject if subject['Id'] else None\n\n\ndef create_subject(db_path: str, name: str, pwd: str):\n    result = subprocess.run([\n        surging_cloud_exe, 'subject', '--db', db_path, '--out-json',\n        '--new', '--name', name, '--pwd', pwd,\n    ], capture_output=True, text=True, shell=True)\n    # No matter a subject with the same name exist or not,\n    # we will get its id after calling create\n    result = json.loads(result.stdout)\n    sid = result['Data']\n    if not sid:\n        print(result['Message'])\n    return sid\n\n\ndef get_item(iid: int, db_path: str):\n    result = subprocess.run([\n        surging_cloud_exe, 'item', '--db', db_path, '--out-json',\n        '--get', '--iid', str(iid),\n    ], capture_output=True, text=True, shell=True)\n    item = json.loads(result.stdout)\n    return item if item['Id'] else None\n\n\ndef recursive_enc_folder(folder_path: str, db_path: str, output_path: str,\n                         sid: int):\n    folder_path = folder_path.replace('\\\\', '/')\n    print('Encrypting', folder_path)\n    if not isdir(folder_path):\n        print('Folder not found:', folder_path)\n        return\n\n    parent_subject = get_subject(sid, db_path)\n    if not parent_subject:\n        print('Parent subject not found, sid =', sid)\n        return\n    parent_name = parent_subject['Name']\n    # every subject will have the same password\n    pwd = parent_subject['Password']\n\n    for f in os.listdir(folder_path):\n        f_abspath = join(folder_path, f)\n        if isfile(f_abspath):\n            result = subprocess.run([\n                surging_cloud_exe, 'enc', '--db', db_path, '--out-json',\n                '--sid', str(sid), '--src', f_abspath,\n                '--out', output_path, '--ignore-dup',\n            ], capture_output=True, text=True, shell=True)\n            # TODO: print something with the result if you wish\n        elif isdir(f_abspath):\n            new_subject_name = parent_name + '/' + f\n            new_sid = create_subject(db_path, new_subject_name, pwd)\n            if not new_sid:\n                return\n            result = subprocess.run([\n                surging_cloud_exe, 'enc', '--db', db_path, '--out-json',\n                '--sid', str(sid), '--src', f_abspath,\n                '--out', output_path,\n            ], capture_output=True, text=True, shell=True)\n            result = json.loads(result.stdout)\n            # TODO: print something with the result if you wish\n            iid = result['Data']\n            if not iid:\n                print(result['Message'])\n                return\n            item = get_item(iid, db_path)\n            recursive_enc_folder(f_abspath, db_path,\n                                 join(output_path, item['NameAfter']), new_sid)\n</code></pre>"},{"location":"usage/subject/","title":"Subject Operation","text":""},{"location":"usage/subject/#create-a-new-subject","title":"Create a new subject","text":"<pre><code>.\\SurgingCloud.Cli.exe subject --new --name \"subject name\" --pwd \"subject password\" --db \"path/to/db\"\n</code></pre> <p>Arguments</p> <ul> <li><code>--name \"subject name\"</code>: set the subject name. Common names are like <code>photos</code> and <code>videos</code>. But detailed names are recommended, and you should probably use folder structure names for better management as the items increase. For example, <code>/photos/travel/2020</code> and <code>/videos/drama/1980</code>.</li> <li><code>--pwd \"subject password\"</code>: set the subject password. This password is what you should remember. The actual password for each encrypted file is made by a hash algorithm (see <code>--hashAlg</code>) given the input of this password. So no encrypted file can be cracked by brute force.</li> <li>(Optional) <code>--hashAlg 0</code>: the hash algorithm for generating the actual password for each encrypted file. <code>0</code> (default) means SHA256, <code>1</code> means SHA1 and <code>2</code> means MD5. You can just omit this argument because SHA256 is the best among them.</li> </ul> <p>Output</p> <pre><code>Creation succeeds, new subject id = 1\n</code></pre>"},{"location":"usage/subject/#list-all-subjects","title":"List all subjects","text":"<pre><code>.\\SurgingCloud.Cli.exe subject --list --db \"path/to/db\"\n</code></pre> <p>Output</p> <pre><code> ------------------------------------------- \n | id | name   | password | hash algorithm |\n -------------------------------------------\n | 1  | Photos | 123      | Sha256         |\n -------------------------------------------\n | 2  | Videos | hello    | Sha1           |\n -------------------------------------------\n\n Count: 2\n</code></pre>"},{"location":"usage/subject/#get-subject-detail","title":"Get subject detail","text":"<pre><code>.\\SurgingCloud.Cli.exe subject --get --sid 1 --db \"path/to/db\"\n</code></pre> <p>Arguments</p> <ul> <li><code>--sid 1</code>: subject id.</li> </ul> <p>Output</p> <pre><code>{\n  \"Id\": 1,\n  \"Name\": \"Photos\",\n  \"Password\": \"123\",\n  \"HashAlg\": \"Sha256\",\n  \"CreateAt\": \"2025-06-26T08:55:04\",\n  \"UpdateAt\": \"2025-06-26T08:55:04\",\n  \"Others\": null,\n  \"ActualPassword\": \"8f6f505d8504ae01cd877fb9405e6c18d19c5b3bff8aa6c9ff723300866930c6\"\n}\n</code></pre> <p>The output is in json format.</p>"},{"location":"usage/subject/#delete-a-subject","title":"Delete a subject","text":"<p>Note that all the items in the subject will also be deleted.</p> <pre><code>.\\SurgingCloud.Cli.exe subject --delete --sid 2 --db \"path/to/db\"\n</code></pre> <p>Arguments</p> <ul> <li><code>--sid 2</code>: subject id.</li> </ul> <p>Output</p> <pre><code>Delete subject 2 succeeds\n</code></pre>"},{"location":"usage/subject/#list-all-items-in-a-subject","title":"List all items in a subject","text":"<pre><code>.\\SurgingCloud.Cli.exe subject --list-items --sid 1 --db \"path/to/db\"\n</code></pre> <p>Arguments</p> <ul> <li><code>--sid 1</code>: subject id.</li> </ul> <p>Output</p> <pre><code> ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n | id | name before | name after           | item type | hash before                                                      | hash after                                                       |\n ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n | 1  | selfie.png  | 6367a30064043fb1f227 | File      | 631422a192ad34bb8945034aa7fb21e19fa052128ee86f191c0521f723c17dbd | 61d5b8ce7637106ba6ebaea3f8d02720b7ab82ad7c833d0e45dd0665c226ce8f |\n ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n Count: 1\n</code></pre>"},{"location":"usage/util/","title":"Utility Operation","text":""},{"location":"usage/util/#generate-archive-password","title":"Generate archive password","text":"<p>Generate the actual password for an encrypted file, namely, an archive.</p> <pre><code>.\\SurgingCloud.Cli.exe util --genpwd --pwd \"hello\" --db \"path/to/db\"\n</code></pre> <p>Arguments</p> <ul> <li><code>--pwd \"hello\"</code>: the subject password, which is the base password for generating the actual password. This subject is just a conceptual one, which does not necessarily exist.</li> <li>(Optional) <code>--hashAlg 0</code>: the hash algorithm for generating the actual password. <code>0</code> (default) means SHA256, <code>1</code> means SHA1 and <code>2</code> means MD5.</li> </ul> <p>Output</p> <pre><code>Subject password: hello\nHash algorithm: Sha256\nGenerated archive password: ef1a7adb182609c7c59170bdc7719516afb6514e539c1bbed5968d2fa5078258\n</code></pre>"},{"location":"usage/util/#hash-filename","title":"Hash filename","text":"<p>This is the same algorithm to generate the filename of an encrypted file. </p> <pre><code>.\\SurgingCloud.Cli.exe util --hash-filename --filename \"selfie.png\" --db \"path/to/db\"\n</code></pre> <p>Arguments</p> <ul> <li><code>--filename \"selfie.png\"</code>: the filename to be hashed.</li> <li>(Optional) <code>--hashAlg 0</code>: the hash algorithm for generating the actual password. <code>0</code> (default) means SHA256, <code>1</code> means SHA1 and <code>2</code> means MD5.</li> </ul> <p>Output</p> <pre><code>Filename: selfie.png\nHash algorithm: Sha256\nHashed filename: 6367a30064043fb1f227\n</code></pre>"}]}